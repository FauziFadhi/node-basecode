import { AutoInvalidate, Model } from 'base-repo';
import { Column, Table } from 'sequelize-typescript';
import { IUnfilledAtt, Optional } from '@utils/base-class/base.interface';
import { ForeignKeyConstraintError, UniqueConstraintError } from 'sequelize';

type INullableAttr = IUnfilledAtt;

/**
 * auto generated attributes, cause of that removed from iModelCreate
 */
interface IAutoGeneratedAttr {
  id: number;
}

export interface IModel
  extends Optional<INullableAttr>,
    Required<IAutoGeneratedAttr> {}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr> &
  Partial<IAutoGeneratedAttr>;

@AutoInvalidate()
@Table({
  tableName: 'table_name',
  paranoid: true,
  indexes: [],
})
export class ModelName extends Model<IModel, IModelCreate> implements IModel {
  @Column
  declare id: number;

  static constraintError(
    e: UniqueConstraintError | ForeignKeyConstraintError,
  ): Promise<never> {
    if (e instanceof UniqueConstraintError) {
      // Handle if any unique constraint error
    }

    throw e;
  }
}
