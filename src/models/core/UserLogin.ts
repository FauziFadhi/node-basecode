import { AutoInvalidate, Model } from 'base-repo';
import {
  Column, HasOne, Scopes, Table,
} from 'sequelize-typescript';
import { IUnfilledAtt, Optional, RelationAttribute } from 'utils/base-class/base.interface';

import { UniqueConstraintError } from 'sequelize';
import { BadRequestException } from '@nestjs/common';
import { User } from './User';

interface IRelation<T = 'attributes'> {
  user: RelationAttribute<User, T, 'userLoginId'>
}

type INullableAttr = IUnfilledAtt & IRelation;

/**
   * auto generated attributes, cause of that removed from iModelCreate
 */
interface IAutoGeneratedAttr {
  id: number;
  isActive: boolean;
}

export interface IModel extends Optional<INullableAttr>, IAutoGeneratedAttr {
  username: string;
  password: string;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr | keyof IRelation>
& Partial<IAutoGeneratedAttr>
& Partial<IRelation<'creation'>>;

@Scopes(() => ({
  active: ({
    where: {
      isActive: true,
    },
  }),
}))
@AutoInvalidate()
@Table({
  tableName: 'user_login',
  paranoid: true,
  indexes: [
    { fields: ['is_active', 'username'], where: { deleted_at: null } },
    { fields: ['username'], unique: true, where: { deleted_at: null } },
  ],
})
export class UserLogin
  extends Model<IModel, IModelCreate>
  implements IModel {
  declare id: number;

  @Column
  declare username: string;

  @Column
  declare password: string;

  /**
   * @default false
   */
  @Column
  declare isActive: boolean;

  @HasOne(() => User)
  declare user: User;

  static constraintError(e: UniqueConstraintError) {
    if (e instanceof UniqueConstraintError) {
      if ('username' in e.fields) {
        throw new BadRequestException('Username must be unique.');
      }
    }

    throw e;
  }
}
