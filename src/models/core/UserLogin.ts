import { Cache, Model } from 'base-repo';
import {
  AllowNull, Column, Default, HasOne, Scopes, Table,
} from 'sequelize-typescript';
import { Attributes } from 'sequelize/types';
import { IUnfilledAtt, Optional, RelationAttribute } from 'utils/base-class/base.interface';

import { User } from './User';

interface IRelation<T = 'attributes'> {
  user: RelationAttribute<User, T, 'userLoginId'>
}

type INullableAttr = IUnfilledAtt & IRelation;

/**
   * auto generated attributes, cause of that removed from iModelCreate
 */
interface IAutoGeneratedAttr {
  id: number;
  isActive: boolean;
}

export interface IModel extends Optional<INullableAttr>, IAutoGeneratedAttr {
  username: string;
  password: string;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr | keyof IRelation>
& Partial<IAutoGeneratedAttr>
& Partial<IRelation<'creation'>>;

@Scopes(() => ({
  active: ({
    where: {
      isActive: true,
    },
  }),
}))
@Cache()
@Table({
  tableName: 'user_login',
  paranoid: true,
  indexes: [{ fields: ['is_active', 'username'], where: { is_deleted: false } }],
})
export class UserLogin
  extends Model<IModel, IModelCreate>
  implements IModel {
  declare id: number;

  @AllowNull(false)
  @Column
  declare username: string;

  @AllowNull(false)
  @Column
  declare password: string;

  @Default(false)
  @Column
  declare isActive: boolean;

  @HasOne(() => User)
  declare user: User;
}
