import { AutoInvalidate, Model } from 'base-repo';
import {
  AllowNull, AutoIncrement, Column, PrimaryKey, Table,
} from 'sequelize-typescript';
import { IUnfilledAtt, Optional } from '@utils/base-class/base.interface';
import { ForeignKeyConstraintError, UniqueConstraintError } from 'sequelize';
import { BadRequestException } from '@nestjs/common';

type INullableAttr = IUnfilledAtt;

/**
   * auto generated attributes, cause of that removed from iModelCreate
 */
interface IAutoGeneratedAttr {
  id: number;
}

export interface IModel extends Optional<INullableAttr>, IAutoGeneratedAttr {
  name: string;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr> & Partial<IAutoGeneratedAttr>;

@AutoInvalidate()
@Table({
  tableName: 'role',
  paranoid: true,
  indexes: [{ fields: ['name'], where: { deleted_at: null } }],
})
export class Role extends Model<IModel, IModelCreate> implements IModel {
  @AutoIncrement
  @PrimaryKey
  @Column
  declare id: number;

  @AllowNull(false)
  @Column
  declare name: string;

  static constraintError(e: UniqueConstraintError | ForeignKeyConstraintError) {
    if (e instanceof UniqueConstraintError) {
      if ('name' in e.fields) {
        throw new BadRequestException('Name must be unique.');
      }
    }

    throw e;
  }
}
