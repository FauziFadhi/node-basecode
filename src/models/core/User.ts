import { AutoInvalidate, Model } from 'base-repo';
import {
  Column, ForeignKey, Table,
} from 'sequelize-typescript';
import {
  IUnfilledAtt, Optional, RelationAttribute,
} from '@utils/base-class/base.interface';

import { Role } from './Role';
import { UserLogin } from './UserLogin';
import { UserRole } from './UserRole';

interface IRelation<T = 'attributes'> {
  roles: RelationAttribute<Role, T, 'userId'>[]
  userLogin: RelationAttribute<UserLogin>
}

/**
   * auto generated attributes, cause of that removed from iModelCreate
 */
interface IAutoGeneratedAttr {
  id: number;
  code: string;
}

interface INullableAttr extends IUnfilledAtt, IRelation {
  phone: string;
}

export interface IModel extends
  Optional<INullableAttr>,
  IAutoGeneratedAttr {
  name: string;
  email: string;
  userLoginId: number;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr | keyof IRelation>
& Partial<IAutoGeneratedAttr>
& Partial<IRelation<'creation'>>;

@AutoInvalidate()
@Table({
  tableName: 'user',
  paranoid: true,
  indexes: [{ fields: ['email'] }],
})
export class User extends Model<IModel, IModelCreate> implements IModel {
  declare id: number;

  @ForeignKey(() => UserLogin)
  declare userLoginId: number;

  @Column
  declare name: string;

  @Column
  declare email: string;

  @Column
  declare phone?: string;

  @Column
  declare code: string;
}
